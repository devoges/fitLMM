s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
}
many <- t(replicate(10, one()))
colMeans(many)
# dvRutils::library_many(magrittr,
#                        Matrix,
#                        dvRutils,
#                        MASS,
#                        lme4,
#                        dplyr)
dvRutils::library_many(dvRutils,
MASS)
sim_data <- function(n,
p,
beta,
k1,
k2,
s21,
s22,
s2e) {
X <- matrix(rnorm(n*p), n, p)
beta <- matrix(beta, p, 1)
Z1 <- matrix(rnorm(n*k1), n, k1)
b1 <- matrix(rnorm(k1, sd = sqrt(s21)), k1, 1)
Z2 <- matrix(rnorm(n*k2), n, k2)
b2 <- matrix(rnorm(k2, sd = sqrt(s22)), k2, 1)
e <- matrix(rnorm(n, sd = sqrt(s2e)), n, 1)
Y <- X%*%beta + Z1%*%b1 + Z2%*%b2 + e
list("Y" = Y,
"X" = X,
Zlist = list("Z1" = Z1,
"Z2" = Z2))
}
one <- function() {
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 2,
k2 = 2,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
}
many <- t(replicate(10, one()))
colMeans(many)
# dvRutils::library_many(magrittr,
#                        Matrix,
#                        dvRutils,
#                        MASS,
#                        lme4,
#                        dplyr)
dvRutils::library_many(dvRutils,
MASS)
sim_data <- function(n,
p,
beta,
k1,
k2,
s21,
s22,
s2e) {
X <- matrix(rnorm(n*p), n, p)
beta <- matrix(beta, p, 1)
Z1 <- matrix(rnorm(n*k1), n, k1)
b1 <- matrix(rnorm(k1, sd = sqrt(s21)), k1, 1)
Z2 <- matrix(rnorm(n*k2), n, k2)
b2 <- matrix(rnorm(k2, sd = sqrt(s22)), k2, 1)
e <- matrix(rnorm(n, sd = sqrt(s2e)), n, 1)
Y <- X%*%beta + Z1%*%b1 + Z2%*%b2 + e
list("Y" = Y,
"X" = X,
Zlist = list("Z1" = Z1,
"Z2" = Z2))
}
one <- function() {
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 2,
k2 = 2,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
}
many <- t(replicate(50, one()))
colMeans(many)
# dvRutils::library_many(magrittr,
#                        Matrix,
#                        dvRutils,
#                        MASS,
#                        lme4,
#                        dplyr)
dvRutils::library_many(dvRutils,
MASS)
sim_data <- function(n,
p,
beta,
k1,
k2,
s21,
s22,
s2e) {
X <- matrix(rnorm(n*p), n, p)
beta <- matrix(beta, p, 1)
Z1 <- matrix(rnorm(n*k1), n, k1)
b1 <- matrix(rnorm(k1, sd = sqrt(s21)), k1, 1)
Z2 <- matrix(rnorm(n*k2), n, k2)
b2 <- matrix(rnorm(k2, sd = sqrt(s22)), k2, 1)
e <- matrix(rnorm(n, sd = sqrt(s2e)), n, 1)
Y <- X%*%beta + Z1%*%b1 + Z2%*%b2 + e
list("Y" = Y,
"X" = X,
Zlist = list("Z1" = Z1,
"Z2" = Z2))
}
one <- function() {
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 2,
k2 = 2,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
}
many <- t(replicate(100, one()))
colMeans(many)
# dvRutils::library_many(magrittr,
#                        Matrix,
#                        dvRutils,
#                        MASS,
#                        lme4,
#                        dplyr)
dvRutils::library_many(dvRutils,
MASS)
sim_data <- function(n,
p,
beta,
k1,
k2,
s21,
s22,
s2e) {
X <- matrix(rnorm(n*p), n, p)
beta <- matrix(beta, p, 1)
Z1 <- matrix(rnorm(n*k1), n, k1)
b1 <- matrix(rnorm(k1, sd = sqrt(s21)), k1, 1)
Z2 <- matrix(rnorm(n*k2), n, k2)
b2 <- matrix(rnorm(k2, sd = sqrt(s22)), k2, 1)
e <- matrix(rnorm(n, sd = sqrt(s2e)), n, 1)
Y <- X%*%beta + Z1%*%b1 + Z2%*%b2 + e
list("Y" = Y,
"X" = X,
Zlist = list("Z1" = Z1,
"Z2" = Z2))
}
one <- function() {
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 2,
k2 = 2,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
}
many <- t(replicate(100, one()))
colMeans(many)
apply(many, 2, sd)
library(GMMAT)
# dvRutils::library_many(magrittr,
#                        Matrix,
#                        dvRutils,
#                        MASS,
#                        lme4,
#                        dplyr)
dvRutils::library_many(dvRutils,
MASS)
sim_data <- function(n,
p,
beta,
k1,
k2,
s21,
s22,
s2e) {
X <- matrix(rnorm(n*p), n, p)
beta <- matrix(beta, p, 1)
Z1 <- matrix(rnorm(n*k1), n, k1)
b1 <- matrix(rnorm(k1, sd = sqrt(s21)), k1, 1)
Z2 <- matrix(rnorm(n*k2), n, k2)
b2 <- matrix(rnorm(k2, sd = sqrt(s22)), k2, 1)
e <- matrix(rnorm(n, sd = sqrt(s2e)), n, 1)
Y <- X%*%beta + Z1%*%b1 + Z2%*%b2 + e
list("Y" = Y,
"X" = X,
Zlist = list("Z1" = Z1,
"Z2" = Z2),
Slist = list("Z1" = Z1%*%t(Z1),
"Z2" = Z1%*%t(Z2)))
}
one <- function() {
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 2,
k2 = 2,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
Slist <- data$Slist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
}
many <- t(replicate(100, one()))
colMeans(many)
apply(many, 2, sd)
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 2,
k2 = 2,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
Slist <- data$Slist
glmmkin(fixed = Y ~ .,
data = as.data.frame(X),
family = gaussian,
kins = Slist)
glmmkin(fixed = Y ~ .,
data = as.data.frame(X),
family = gaussian(),
kins = Slist)
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 100,
k2 = 100,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
Slist <- data$Slist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
glmmkin(fixed = Y ~ .,
data = as.data.frame(X),
family = gaussian(),
kins = Slist)
debugonce(glmmkin)
glmmkin(fixed = Y ~ .,
data = as.data.frame(X),
family = gaussian(),
kins = Slist)
debugonce(glmmkin)
glmmkin(fixed = Y ~ .,
data = as.data.frame(X),
family = gaussian(),
kins = Slist)
Slist
str(Slist)
solve(Slist$Z1)
solve(Slist$Z2)
data <- model.matrix(Y ~ X)
a
data
data <- model.matrix(Y ~ X) %>%
extract2(, -1)
data <- model.matrix(Y ~ X)[, -1]
data
X
data <- as.data.frame(Y = Y, X)
head(data)
data <- as.data.frame(X)
head(data)
X <- matrix(rnorm(n*p), n, p)
# dvRutils::library_many(magrittr,
#                        Matrix,
#                        dvRutils,
#                        MASS,
#                        lme4,
#                        dplyr)
dvRutils::library_many(dvRutils,
MASS)
sim_data <- function(n,
p,
beta,
k1,
k2,
s21,
s22,
s2e) {
X <- matrix(rnorm(n*p), n, p)
names(X) <- paste0("X_", 1:p)
beta <- matrix(beta, p, 1)
Z1 <- matrix(rnorm(n*k1), n, k1)
b1 <- matrix(rnorm(k1, sd = sqrt(s21)), k1, 1)
Z2 <- matrix(rnorm(n*k2), n, k2)
b2 <- matrix(rnorm(k2, sd = sqrt(s22)), k2, 1)
e <- matrix(rnorm(n, sd = sqrt(s2e)), n, 1)
Y <- X%*%beta + Z1%*%b1 + Z2%*%b2 + e
list("Y" = Y,
"X" = X,
Zlist = list("Z1" = Z1,
"Z2" = Z2),
Slist = list("Z1" = Z1%*%t(Z1),
"Z2" = Z1%*%t(Z2)))
}
one <- function() {
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 100,
k2 = 100,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
Slist <- data$Slist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
}
many <- t(replicate(100, one()))
colMeans(many)
apply(many, 2, sd)
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 100,
k2 = 100,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
Slist <- data$Slist
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 100,
k2 = 100,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
Slist <- data$Slist
X
sim_data <- function(n,
p,
beta,
k1,
k2,
s21,
s22,
s2e) {
X <- matrix(rnorm(n*p), n, p)
colnames(X) <- paste0("X_", 1:p)
beta <- matrix(beta, p, 1)
Z1 <- matrix(rnorm(n*k1), n, k1)
b1 <- matrix(rnorm(k1, sd = sqrt(s21)), k1, 1)
Z2 <- matrix(rnorm(n*k2), n, k2)
b2 <- matrix(rnorm(k2, sd = sqrt(s22)), k2, 1)
e <- matrix(rnorm(n, sd = sqrt(s2e)), n, 1)
Y <- X%*%beta + Z1%*%b1 + Z2%*%b2 + e
list("Y" = Y,
"X" = X,
Zlist = list("Z1" = Z1,
"Z2" = Z2),
Slist = list("Z1" = Z1%*%t(Z1),
"Z2" = Z1%*%t(Z2)))
}
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 100,
k2 = 100,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
Slist <- data$Slist
X
data <- as.data.frame(X)
head(data)
data <- as.data.frame(X, Y = Y)
head(data)
data$Y <- Y
head(data)
data <- as.data.frame(X)
data$Y <- Y
glmmkin(fixed = Y ~ .,
data = data,
family = gaussian(),
kins = Slist)
chol(Slist[[1]])
debugonce("glmmkin")
glmmkin(fixed = Y ~ .,
data = data,
family = gaussian(),
kins = Slist)
Sigma
str(Sigma)
chol(Sigma)
chol2inv(chol(Sigma))
debugonce("glmmkin")
glmmkin(fixed = Y ~ .,
data = data,
family = gaussian(),
kins = Slist)
# dvRutils::library_many(magrittr,
#                        Matrix,
#                        dvRutils,
#                        MASS,
#                        lme4,
#                        dplyr)
dvRutils::library_many(dvRutils,
MASS)
sim_data <- function(n,
p,
beta,
k1,
k2,
s21,
s22,
s2e) {
X <- matrix(rnorm(n*p), n, p)
colnames(X) <- paste0("X_", 1:p)
beta <- matrix(beta, p, 1)
Z1 <- matrix(rnorm(n*k1), n, k1)
b1 <- matrix(rnorm(k1, sd = sqrt(s21)), k1, 1)
Z2 <- matrix(rnorm(n*k2), n, k2)
b2 <- matrix(rnorm(k2, sd = sqrt(s22)), k2, 1)
e <- matrix(rnorm(n, sd = sqrt(s2e)), n, 1)
Y <- X%*%beta + Z1%*%b1 + Z2%*%b2 + e
list("Y" = Y,
"X" = X,
Zlist = list("Z1" = Z1,
"Z2" = Z2),
Slist = list("Z1" = Z1%*%t(Z1),
"Z2" = Z1%*%t(Z2)))
}
one <- function() {
data <- sim_data(n = 100,
p = 2,
beta = 1,
k1 = 100,
k2 = 100,
s21 = 2,
s22 = 2,
s2e = 1)
Y <- data$Y
X <- data$X
Zlist <- data$Zlist
Slist <- data$Slist
fitLMM::fit_lmer(Y = Y,
X = X,
Zlist = Zlist)$vcs
}
many <- t(replicate(100, one()))
colMeans(many)
apply(many, 2, sd)
library(fitLMM)
